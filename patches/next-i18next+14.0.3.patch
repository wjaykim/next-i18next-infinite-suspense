diff --git a/node_modules/next-i18next/dist/commonjs/appWithTranslation.js b/node_modules/next-i18next/dist/commonjs/appWithTranslation.js
index c09e41a..4e9fea6 100644
--- a/node_modules/next-i18next/dist/commonjs/appWithTranslation.js
+++ b/node_modules/next-i18next/dist/commonjs/appWithTranslation.js
@@ -1,6 +1,5 @@
 "use strict";
 
-require("core-js/modules/es.object.keys.js");
 require("core-js/modules/es.symbol.js");
 require("core-js/modules/es.array.filter.js");
 require("core-js/modules/es.object.to-string.js");
@@ -40,6 +39,7 @@ Object.defineProperty(exports, "withTranslation", {
 });
 var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
 var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
+require("core-js/modules/es.object.keys.js");
 var _react = _interopRequireWildcard(require("react"));
 var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));
 var _reactI18next = require("react-i18next");
@@ -60,6 +60,7 @@ var appWithTranslation = function appWithTranslation(WrappedComponent) {
       _nextI18Next = _ref._nextI18Next; // pageProps may be undefined on strange setups, i.e. https://github.com/i18next/next-i18next/issues/2109
     var locale = (_nextI18Next$initialL = _nextI18Next === null || _nextI18Next === void 0 ? void 0 : _nextI18Next.initialLocale) !== null && _nextI18Next$initialL !== void 0 ? _nextI18Next$initialL : props === null || props === void 0 ? void 0 : (_props$router = props.router) === null || _props$router === void 0 ? void 0 : _props$router.locale;
     var ns = _nextI18Next === null || _nextI18Next === void 0 ? void 0 : _nextI18Next.ns;
+    var instanceRef = (0, _react.useRef)(null);
 
     // Memoize the instance and only re-initialize when either:
     // 1. The route changes (non-shallowly)
@@ -82,16 +83,31 @@ var appWithTranslation = function appWithTranslation(WrappedComponent) {
         initialI18nStore = _ref2.initialI18nStore;
       var resources = configOverride !== null && configOverride !== void 0 && configOverride.resources ? configOverride.resources : initialI18nStore;
       if (!locale) locale = userConfig.i18n.defaultLocale;
-      var instance = (0, _createClient["default"])(_objectSpread(_objectSpread({}, (0, _createConfig.createConfig)(_objectSpread(_objectSpread({}, userConfig), {}, {
-        lng: locale
-      }))), {}, {
-        lng: locale,
-        ns: ns,
-        resources: resources
-      })).i18n;
-      exports.globalI18n = globalI18n = instance;
+      var instance = instanceRef.current;
+      if (instance) {
+        instance.changeLanguage(locale);
+        if (resources) {
+          for (var _i = 0, _Object$keys = Object.keys(resources); _i < _Object$keys.length; _i++) {
+            var _locale = _Object$keys[_i];
+            for (var _i2 = 0, _Object$keys2 = Object.keys(resources[_locale]); _i2 < _Object$keys2.length; _i2++) {
+              var _ns = _Object$keys2[_i2];
+              instance.addResourceBundle(_locale, _ns, resources[_locale][_ns], true, true);
+            }
+          }
+        }
+      } else {
+        instance = (0, _createClient["default"])(_objectSpread(_objectSpread({}, (0, _createConfig.createConfig)(_objectSpread(_objectSpread({}, userConfig), {}, {
+          lng: locale
+        }))), {}, {
+          lng: locale,
+          ns: ns,
+          resources: resources
+        })).i18n;
+        exports.globalI18n = globalI18n = instance;
+        instanceRef.current = instance;
+      }
       return instance;
-    }, [_nextI18Next, locale, configOverride, ns]);
+    }, [_nextI18Next, locale, ns]);
     return i18n !== null ? __jsx(_reactI18next.I18nextProvider, {
       i18n: i18n
     }, __jsx(WrappedComponent, props)) : __jsx(WrappedComponent, (0, _extends2["default"])({
diff --git a/node_modules/next-i18next/dist/es/appWithTranslation.js b/node_modules/next-i18next/dist/es/appWithTranslation.js
index 92b3232..bf66a50 100644
--- a/node_modules/next-i18next/dist/es/appWithTranslation.js
+++ b/node_modules/next-i18next/dist/es/appWithTranslation.js
@@ -1,5 +1,5 @@
 function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
-import React, { useMemo } from 'react';
+import React, { useMemo, useRef } from 'react';
 import hoistNonReactStatics from 'hoist-non-react-statics';
 import { I18nextProvider } from 'react-i18next';
 import { createConfig } from './config/createConfig';
@@ -13,6 +13,7 @@ export const appWithTranslation = (WrappedComponent, configOverride = null) => {
     } = props.pageProps || {}; // pageProps may be undefined on strange setups, i.e. https://github.com/i18next/next-i18next/issues/2109
     let locale = _nextI18Next?.initialLocale ?? props?.router?.locale;
     const ns = _nextI18Next?.ns;
+    const instanceRef = useRef(null);
 
     // Memoize the instance and only re-initialize when either:
     // 1. The route changes (non-shallowly)
@@ -35,18 +36,31 @@ export const appWithTranslation = (WrappedComponent, configOverride = null) => {
       } = _nextI18Next || {};
       const resources = configOverride?.resources ? configOverride.resources : initialI18nStore;
       if (!locale) locale = userConfig.i18n.defaultLocale;
-      const instance = createClient({
-        ...createConfig({
-          ...userConfig,
-          lng: locale
-        }),
-        lng: locale,
-        ns,
-        resources
-      }).i18n;
-      globalI18n = instance;
+      let instance = instanceRef.current;
+      if (instance) {
+        instance.changeLanguage(locale);
+        if (resources) {
+          for (const locale of Object.keys(resources)) {
+            for (const ns of Object.keys(resources[locale])) {
+              instance.addResourceBundle(locale, ns, resources[locale][ns], true, true);
+            }
+          }
+        }
+      } else {
+        instance = createClient({
+          ...createConfig({
+            ...userConfig,
+            lng: locale
+          }),
+          lng: locale,
+          ns,
+          resources
+        }).i18n;
+        globalI18n = instance;
+        instanceRef.current = instance;
+      }
       return instance;
-    }, [_nextI18Next, locale, configOverride, ns]);
+    }, [_nextI18Next, locale, ns]);
     return i18n !== null ? /*#__PURE__*/React.createElement(I18nextProvider, {
       i18n: i18n
     }, /*#__PURE__*/React.createElement(WrappedComponent, props)) : /*#__PURE__*/React.createElement(WrappedComponent, _extends({
diff --git a/node_modules/next-i18next/dist/esm/appWithTranslation.js b/node_modules/next-i18next/dist/esm/appWithTranslation.js
index 1e40c87..80096c2 100644
--- a/node_modules/next-i18next/dist/esm/appWithTranslation.js
+++ b/node_modules/next-i18next/dist/esm/appWithTranslation.js
@@ -3,7 +3,7 @@ import _defineProperty from "@babel/runtime/helpers/defineProperty";
 var __jsx = React.createElement;
 function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
 function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
-import React, { useMemo } from 'react';
+import React, { useMemo, useRef } from 'react';
 import hoistNonReactStatics from 'hoist-non-react-statics';
 import { I18nextProvider } from 'react-i18next';
 import { createConfig } from './config/createConfig';
@@ -18,6 +18,7 @@ export var appWithTranslation = function appWithTranslation(WrappedComponent) {
       _nextI18Next = _ref._nextI18Next; // pageProps may be undefined on strange setups, i.e. https://github.com/i18next/next-i18next/issues/2109
     var locale = (_nextI18Next$initialL = _nextI18Next === null || _nextI18Next === void 0 ? void 0 : _nextI18Next.initialLocale) !== null && _nextI18Next$initialL !== void 0 ? _nextI18Next$initialL : props === null || props === void 0 ? void 0 : (_props$router = props.router) === null || _props$router === void 0 ? void 0 : _props$router.locale;
     var ns = _nextI18Next === null || _nextI18Next === void 0 ? void 0 : _nextI18Next.ns;
+    var instanceRef = useRef(null);
 
     // Memoize the instance and only re-initialize when either:
     // 1. The route changes (non-shallowly)
@@ -40,16 +41,31 @@ export var appWithTranslation = function appWithTranslation(WrappedComponent) {
         initialI18nStore = _ref2.initialI18nStore;
       var resources = configOverride !== null && configOverride !== void 0 && configOverride.resources ? configOverride.resources : initialI18nStore;
       if (!locale) locale = userConfig.i18n.defaultLocale;
-      var instance = createClient(_objectSpread(_objectSpread({}, createConfig(_objectSpread(_objectSpread({}, userConfig), {}, {
-        lng: locale
-      }))), {}, {
-        lng: locale,
-        ns: ns,
-        resources: resources
-      })).i18n;
-      globalI18n = instance;
+      var instance = instanceRef.current;
+      if (instance) {
+        instance.changeLanguage(locale);
+        if (resources) {
+          for (var _i = 0, _Object$keys = Object.keys(resources); _i < _Object$keys.length; _i++) {
+            var _locale = _Object$keys[_i];
+            for (var _i2 = 0, _Object$keys2 = Object.keys(resources[_locale]); _i2 < _Object$keys2.length; _i2++) {
+              var _ns = _Object$keys2[_i2];
+              instance.addResourceBundle(_locale, _ns, resources[_locale][_ns], true, true);
+            }
+          }
+        }
+      } else {
+        instance = createClient(_objectSpread(_objectSpread({}, createConfig(_objectSpread(_objectSpread({}, userConfig), {}, {
+          lng: locale
+        }))), {}, {
+          lng: locale,
+          ns: ns,
+          resources: resources
+        })).i18n;
+        globalI18n = instance;
+        instanceRef.current = instance;
+      }
       return instance;
-    }, [_nextI18Next, locale, configOverride, ns]);
+    }, [_nextI18Next, locale, ns]);
     return i18n !== null ? __jsx(I18nextProvider, {
       i18n: i18n
     }, __jsx(WrappedComponent, props)) : __jsx(WrappedComponent, _extends({
